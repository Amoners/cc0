#include "CSourceParser.h"

#include <iostream>
#include <antlr3.h>
#include <CLexer.h>
#include <CParser.h>
#include <stdio.h>

CSourceParser::CSourceParser()
{

}

CSourceParser::~CSourceParser()
{
}

void CSourceParser::Parse(std::string fileName)
{
    ANTLR3_UINT8 *fName = (pANTLR3_UINT8)fileName.c_str();
    
    ANTLR3_INPUT_STREAM  *input  = antlr3FileStreamNew(fName, ANTLR3_ENC_UTF8);
    if (input == NULL)
    {
        ANTLR3_FPRINTF(stderr, "Unable to open file %s.\n", (char *)fName);
        exit(ANTLR3_ERR_NOMEM);    }

    CLexer *lxr  = CLexerNew(input);      // CLexerNew is generated by ANTLR
    if (lxr == NULL)
    {
        ANTLR3_FPRINTF(stderr, "Unable to create the lexer due to malloc() failure1\n");
        exit(ANTLR3_ERR_NOMEM);
    }

    ANTLR3_COMMON_TOKEN_STREAM  *tstream = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, TOKENSOURCE(lxr));
    if (tstream == NULL)
    {
        ANTLR3_FPRINTF(stderr, "Out of memory trying to allocate token stream\n");
        exit(ANTLR3_ERR_NOMEM);
    }

    CParser *psr = CParserNew(tstream);
    CompilationContext::GetInstance()->CurrentParser = psr->pParser;
    
    CompilationContext::GetInstance()->CodeDom = psr->translation_unit(psr);

    CompilationContext::GetInstance()->CurrentParser = NULL;


    psr     ->free(psr);
    psr     = NULL;
    tstream ->free(tstream);
    tstream = NULL;
    lxr     ->free(lxr);
    lxr     = NULL;
    input   ->close(input);
    input   = NULL;
}



